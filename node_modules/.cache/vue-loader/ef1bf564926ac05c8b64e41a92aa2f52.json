{"remainingRequest":"/Users/yuhsuanlee/Switcher/main_vue/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/yuhsuanlee/Switcher/main_vue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yuhsuanlee/Switcher/main_vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuhsuanlee/Switcher/main_vue/src/views/Seller.vue?vue&type=template&id=302f8ab9&","dependencies":[{"path":"/Users/yuhsuanlee/Switcher/main_vue/src/views/Seller.vue","mtime":1592301422250},{"path":"/Users/yuhsuanlee/Switcher/main_vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhsuanlee/Switcher/main_vue/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/yuhsuanlee/Switcher/main_vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhsuanlee/Switcher/main_vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}