{"remainingRequest":"/Users/yuhsuanlee/Switcher/main_vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuhsuanlee/Switcher/main_vue/src/views/back_side/Login.vue?vue&type=template&id=6774033f&","dependencies":[{"path":"/Users/yuhsuanlee/Switcher/main_vue/src/views/back_side/Login.vue","mtime":1591288680798},{"path":"/Users/yuhsuanlee/Switcher/main_vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhsuanlee/Switcher/main_vue/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/yuhsuanlee/Switcher/main_vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuhsuanlee/Switcher/main_vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}